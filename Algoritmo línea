import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.HashSet;
import javax.swing.table.DefaultTableModel;

public class AlgoritmoLinealSimulacionGUI extends JFrame {

    private JTextField campoX, campoK, campoG, campoIteraciones;
    private JTable tablaResultados;  // Usar JTable para mostrar resultados
    private DefaultTableModel modeloTabla;  // Modelo de tabla para agregar filas dinámicamente

    public AlgoritmoLinealSimulacionGUI() {
        setTitle("Simulación de Algoritmo Lineal");
        setSize(700, 350); // Aumentar tamaño de la ventana
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Centrar la ventana

        // Crear componentes
        campoX = new JTextField(15);
        campoK = new JTextField(15);
        campoG = new JTextField(15);
        campoIteraciones = new JTextField(15);
        JButton botonCalcular = new JButton("Calcular");

        // Agregar ActionListener al botón
        botonCalcular.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                calcular();
            }
        });

        // Configurar el diseño
        JPanel panelEntradas = new JPanel();
        panelEntradas.setLayout(new GridLayout(5, 2));
        panelEntradas.add(new JLabel("Valor de 'x':"));
        panelEntradas.add(campoX);
        panelEntradas.add(new JLabel("Valor de 'k':"));
        panelEntradas.add(campoK);
        panelEntradas.add(new JLabel("Valor de 'g':"));
        panelEntradas.add(campoG);
        panelEntradas.add(new JLabel("Número de iteraciones (opcional):"));
        panelEntradas.add(campoIteraciones);
        panelEntradas.add(botonCalcular);

        add(panelEntradas, BorderLayout.NORTH);
        setVisible(true); // Hacer visible la ventana
    }

    private void calcular() {
        try {
            long x = Long.parseLong(campoX.getText());
            long k = Long.parseLong(campoK.getText());
            long g = Long.parseLong(campoG.getText());

            // Calcular los valores de a y m
            long a = 1 + 4 * k;  // Fórmula para a
            long m = (long) Math.pow(2, g);  // m = 2^g
            long c = findLargestPrimeLessThan(m); // Encontrar el número primo más grande menor que m

            // Determinar el número de iteraciones
            boolean usarIteracionesUsuario = !campoIteraciones.getText().isEmpty();
            int iteraciones = 0;
            if (usarIteracionesUsuario) {
                iteraciones = Integer.parseInt(campoIteraciones.getText());
            }

            // Crear una nueva ventana para mostrar los resultados
            JFrame ventanaResultados = new JFrame("Resultados de la Simulación");
            ventanaResultados.setSize(700, 500); // Aumentar tamaño de la ventana de resultados
            ventanaResultados.setLocationRelativeTo(null); // Centrar la ventana

            // Crear un modelo de tabla para almacenar los datos de la simulación
            String[] columnas = {"a", "x", "c", "Resultado", "MOD", "M-1", "Ri"};
            modeloTabla = new DefaultTableModel(columnas, 0);  // Modelo de tabla vacío
            tablaResultados = new JTable(modeloTabla);  // Crear JTable con el modelo

            // Ejecutar el algoritmo lineal
            HashSet<Long> valoresX = new HashSet<>(); // Para detectar repeticiones de x
            int i = 0;
            boolean repetirDetectado = false;

            while (usarIteracionesUsuario ? i < iteraciones : !repetirDetectado) {
                if (valoresX.contains(x)) {
                    repetirDetectado = true;  // Se ha detectado una repetición de x
                }

                valoresX.add(x);
                long resultado = (a * x + c);  // Calcular el resultado sin aplicar el módulo
                long mod = resultado % m;      // Aplicar el módulo
                double ri = (double) mod / (m - 1);  // Calcular Ri como mod/(M-1)

                // Agregar una fila con los resultados al modelo de la tabla
                modeloTabla.addRow(new Object[]{a, x, c, resultado, mod, (m - 1), String.format("%.4f", ri)});

                // Actualizar x para la siguiente iteración
                x = mod;
                i++;

                // Si se detecta una repetición, ejecutar una iteración más
                if (repetirDetectado) {
                    break;
                }
            }

            // Agregar la tabla a un panel con scroll
            JScrollPane scrollTabla = new JScrollPane(tablaResultados);

            // Botón para exportar a TXT
            JButton botonExportarTXT = new JButton("Exportar a TXT");
            botonExportarTXT.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    exportarTXT();
                }
            });

            // Agregar paneles al marco de resultados
            ventanaResultados.setLayout(new BorderLayout());
            ventanaResultados.add(scrollTabla, BorderLayout.CENTER);
            JPanel panelBotones = new JPanel();
            panelBotones.add(botonExportarTXT); // Agregar botón de exportación TXT
            ventanaResultados.add(panelBotones, BorderLayout.SOUTH); // Botón de exportación

            ventanaResultados.setVisible(true); // Hacer visible la ventana de resultados

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Por favor, introduce valores válidos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Función para exportar los datos a un archivo TXT con mejor estructura
    private void exportarTXT() {
        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("simulacion_resultados.txt"), "UTF-8"))) {
            // Formato fijo para cada columna (ajusta según los valores típicos)
            String formatoEncabezados = "%-10s %-10s %-10s %-15s %-10s %-10s %-10s";
            String formatoFila = "%-10d %-10d %-10d %-15d %-10d %-10d %-10s";

            // Escribir encabezados de la tabla con formato fijo
            writer.write(String.format(formatoEncabezados, "a", "x", "c", "Resultado", "MOD", "M-1", "Ri"));
            writer.newLine(); // Nueva línea después de los encabezados

            // Escribir los datos de la tabla con formato fijo
            for (int i = 0; i < tablaResultados.getRowCount(); i++) {
                writer.write(String.format(formatoFila,
                    Long.parseLong(tablaResultados.getValueAt(i, 0).toString()),  // a
                    Long.parseLong(tablaResultados.getValueAt(i, 1).toString()),  // x
                    Long.parseLong(tablaResultados.getValueAt(i, 2).toString()),  // c
                    Long.parseLong(tablaResultados.getValueAt(i, 3).toString()),  // Resultado
                    Long.parseLong(tablaResultados.getValueAt(i, 4).toString()),  // MOD
                    Long.parseLong(tablaResultados.getValueAt(i, 5).toString()),  // M-1
                    tablaResultados.getValueAt(i, 6).toString()                 // Ri
                ));
                writer.newLine(); // Nueva línea después de cada fila
            }

            JOptionPane.showMessageDialog(this, "Los resultados se han exportado a 'simulacion_resultados.txt'.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al exportar a TXT.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private long findLargestPrimeLessThan(long n) {
        for (long i = n - 1; i >= 2; i--) {
            if (isPrime(i)) {
                return i;
            }
        }
        return 2; // Si no se encuentra, retornar el menor primo
    }

    private boolean isPrime(long num) {
        if (num < 2) return false;
        for (long i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) return false;
        }
        return true;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new AlgoritmoLinealSimulacionGUI());
    }
}
